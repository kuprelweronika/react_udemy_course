{"ast":null,"code":"var _jsxFileName = \"/Users/weronikaficek/Desktop/PROJEKTY/198/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport useInput from \"../hooks/use-input\"; //mozna tez ustawic ref na inpucie i czytac wartosc tego refa\n//kiedy potrzebujemy\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangedHandler,\n    inputBlurHandler: nameBlurHandler\n  } = useInput(value.trim() !== \"\"); //const nameInputRef = useRef(\"\");\n\n  const [enteredEmail, setEnteredEmail] = useState(\"\"); //state dla walidacji\n  //const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const enteredEmailIsValid = enteredEmail.trim() !== \"\" && enteredEmail.includes(\"@\");\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    /*&& enteredAgeIsValid)*/\n    formIsValid = true;\n  }\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value); //event dla kazdej wpisanej litery\n  };\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n  };\n\n  const emailInputBlurHandler = event => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true); //musimy dac zeby nie wysylalo HTTP requesta\n    //robimy if zeby user nie mogl wrzucic empty form\n\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    }\n\n    console.log(enteredName);\n    console.log(enteredEmail); //to samo ale z uzyciem Ref, to nie jest zbyt dobre\n    //const enteredValue = nameInputRef.current.value;\n    //console.log(enteredValue);\n    //resetowanie zawartosci\n\n    setEnteredName(\"\");\n    setEnteredEmail(\"\");\n    setEnteredNameTouched(false);\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = emailInputIsInvalid ? \"form-control invalid\" : \"form-control\"; //wyzej jest warunek do zmiany klasy wzgledem tego czy input jest valid czy nie\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        // ref={nameInputRef}\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        // ref={nameInputRef}\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Email must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \" Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"OxC7lqRyWt5yVqBcfOD5LzihCRc=\", false, function () {\n  return [useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useInput","SimpleInput","props","value","enteredName","hasError","nameInputHasError","valueChangeHandler","nameChangedHandler","inputBlurHandler","nameBlurHandler","trim","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","nameInputIsInvalid","enteredNameIsValid","enteredNameTouched","enteredEmailIsValid","includes","emailInputIsInvalid","formIsValid","nameInputChangeHandler","event","setEnteredName","target","emailInputChangeHandler","nameInputBlurHandler","setEnteredNameTouched","emailInputBlurHandler","formSubmissionHandler","preventDefault","console","log","nameInputClasses","emailInputClasses"],"sources":["/Users/weronikaficek/Desktop/PROJEKTY/198/src/components/SimpleInput.js"],"sourcesContent":["import { useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\n\n//mozna tez ustawic ref na inpucie i czytac wartosc tego refa\n//kiedy potrzebujemy\n\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangedHandler,\n    inputBlurHandler: nameBlurHandler,\n  } = useInput(value.trim() !== \"\");\n  //const nameInputRef = useRef(\"\");\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  //state dla walidacji\n  //const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  const enteredEmailIsValid =\n    enteredEmail.trim() !== \"\" && enteredEmail.includes(\"@\");\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    /*&& enteredAgeIsValid)*/ formIsValid = true;\n  }\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value);\n    //event dla kazdej wpisanej litery\n  };\n\n  const emailInputChangeHandler = (event) => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const nameInputBlurHandler = (event) => {\n    setEnteredNameTouched(true);\n  };\n\n  const emailInputBlurHandler = (event) => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n    //musimy dac zeby nie wysylalo HTTP requesta\n\n    //robimy if zeby user nie mogl wrzucic empty form\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    }\n    console.log(enteredName);\n    console.log(enteredEmail);\n    //to samo ale z uzyciem Ref, to nie jest zbyt dobre\n    //const enteredValue = nameInputRef.current.value;\n    //console.log(enteredValue);\n\n    //resetowanie zawartosci\n    setEnteredName(\"\");\n    setEnteredEmail(\"\");\n    setEnteredNameTouched(false);\n    setEnteredEmailTouched(false);\n  };\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = emailInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n  //wyzej jest warunek do zmiany klasy wzgledem tego czy input jest valid czy nie\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          // ref={nameInputRef}\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className=\"error-text\">Name must not be empty.</p>\n        )}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor=\"email\">Email:</label>\n        <input\n          // ref={nameInputRef}\n          type=\"email\"\n          id=\"email\"\n          onChange={emailInputChangeHandler}\n          onBlur={emailInputBlurHandler}\n          value={enteredEmail}\n        />\n        {emailInputIsInvalid && (\n          <p className=\"error-text\">Email must not be empty.</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}> Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}