{"ast":null,"code":"var _jsxFileName = \"/Users/weronikaficek/Desktop/PROJEKTY/176/src/App.js\";\nimport React, { useState } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n\n  function fetchMoviesHandler() {\n    //przechwytuje dane z serwera\n    //wszystko wykonuje z funkcją .then() zeby miec gwarancje ze poprzednia rzecz sie wykonała zanim przejdzie dalej\n    fetch(\"https://swapi.dev/api/films/\").then(response => {\n      return response.json(); //sciagam dane z json, to jest najpopularniejszy format danych\n      //transformuje go do js\n    }).then(data => {\n      data.results;\n    });\n  } //te dane pobrane muszą być przechowywane w stanie, który będzie updateowany i uzywany do MoviesList\n  //dodalam stan\n  //teraz array z bazy danych będzie nowym stanem\n  //przepisuje go na koniec funkcji z transformedMovies\n  //setMovies(data.results);\n  //moja aplikacja w komponencie Movies pobiera title, releaseDate i openingText, to sie nie zgadza z baza danych wiec trzeba to zmienic\n\n\n  const transformedMovies = data.results.map(movieData => {\n    return {\n      id: movieData.episode_id,\n      title: movieData.title,\n      openingText: movieData.opening_crawl,\n      releaseDate: movieData.release_date\n    };\n  });\n  setMovies(transformedMovies);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MoviesList, {\n    movies: movies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"names":["React","useState","MoviesList","App","movies","setMovies","fetchMoviesHandler","fetch","then","response","json","data","results","transformedMovies","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date"],"sources":["/Users/weronikaficek/Desktop/PROJEKTY/176/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n\n  function fetchMoviesHandler() {\n    //przechwytuje dane z serwera\n    //wszystko wykonuje z funkcją .then() zeby miec gwarancje ze poprzednia rzecz sie wykonała zanim przejdzie dalej\n    fetch(\"https://swapi.dev/api/films/\")\n      .then((response) => {\n        return response.json(); //sciagam dane z json, to jest najpopularniejszy format danych\n        //transformuje go do js\n      })\n      .then((data) => {\n        data.results;\n      });\n  }\n  //te dane pobrane muszą być przechowywane w stanie, który będzie updateowany i uzywany do MoviesList\n  //dodalam stan\n  //teraz array z bazy danych będzie nowym stanem\n  //przepisuje go na koniec funkcji z transformedMovies\n  //setMovies(data.results);\n\n  //moja aplikacja w komponencie Movies pobiera title, releaseDate i openingText, to sie nie zgadza z baza danych wiec trzeba to zmienic\n  const transformedMovies = data.results.map((movieData) => {\n    return {\n      id: movieData.episode_id,\n      title: movieData.title,\n      openingText: movieData.opening_crawl,\n      releaseDate: movieData.release_date,\n    };\n  });\n  setMovies(transformedMovies);\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        <MoviesList movies={movies} />\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;EACb,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,EAAD,CAApC;;EAEA,SAASK,kBAAT,GAA8B;IAC5B;IACA;IACAC,KAAK,CAAC,8BAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAc;MAClB,OAAOA,QAAQ,CAACC,IAAT,EAAP,CADkB,CACM;MACxB;IACD,CAJH,EAKGF,IALH,CAKSG,IAAD,IAAU;MACdA,IAAI,CAACC,OAAL;IACD,CAPH;EAQD,CAdY,CAeb;EACA;EACA;EACA;EACA;EAEA;;;EACA,MAAMC,iBAAiB,GAAGF,IAAI,CAACC,OAAL,CAAaE,GAAb,CAAkBC,SAAD,IAAe;IACxD,OAAO;MACLC,EAAE,EAAED,SAAS,CAACE,UADT;MAELC,KAAK,EAAEH,SAAS,CAACG,KAFZ;MAGLC,WAAW,EAAEJ,SAAS,CAACK,aAHlB;MAILC,WAAW,EAAEN,SAAS,CAACO;IAJlB,CAAP;EAMD,CAPyB,CAA1B;EAQAjB,SAAS,CAACQ,iBAAD,CAAT;EAEA,oBACE,oBAAC,KAAD,CAAO,QAAP;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAQ,OAAO,EAAEP,kBAAjB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,kBADF,CADF,eAIE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE,oBAAC,UAAD;IAAY,MAAM,EAAEF,MAApB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADF,CAJF,CADF;AAUD;;AAED,eAAeD,GAAf"},"metadata":{},"sourceType":"module"}