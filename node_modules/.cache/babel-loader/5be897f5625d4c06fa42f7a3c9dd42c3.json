{"ast":null,"code":"var _jsxFileName = \"/Users/weronikaficek/Desktop/PROJEKTY/198/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport useInput from \"../hooks/use-input\"; //mozna tez ustawic ref na inpucie i czytac wartosc tego refa\n//kiedy potrzebujemy\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== \"\"); //const nameInputRef = useRef(\"\");\n\n  const [enteredEmail, setEnteredEmail] = useState(\"\"); //state dla walidacji\n  //const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false); //const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  //const enteredEmailIsValid =\n  // enteredEmail.trim() !== \"\" && enteredEmail.includes(\"@\");\n  //const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    /*&& enteredAgeIsValid)*/\n    formIsValid = true;\n  }\n\n  const nameChangedHandler = event => {\n    setEnteredName(event.target.value); //event dla kazdej wpisanej litery\n  };\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  }; // const nameBlurHandler = (event) => {\n  //   setEnteredNameTouched(true);\n  // };\n\n\n  const emailInputBlurHandler = event => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault(); //musimy dac zeby nie wysylalo HTTP requesta\n    //robimy if zeby user nie mogl wrzucic empty form\n\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    }\n\n    console.log(enteredName);\n    console.log(enteredEmail); //to samo ale z uzyciem Ref, to nie jest zbyt dobre\n    //const enteredValue = nameInputRef.current.value;\n    //console.log(enteredValue);\n\n    resetNameInput(); //resetowanie zawartosci\n    // setEnteredName(\"\");\n\n    setEnteredEmail(\"\"); // setEnteredNameTouched(false);\n\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputHasError ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = emailInputIsInvalid ? \"form-control invalid\" : \"form-control\"; //wyzej jest warunek do zmiany klasy wzgledem tego czy input jest valid czy nie\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        // ref={nameInputRef}\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangedHandler,\n        onBlur: nameBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        // ref={nameInputRef}\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Email must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \" Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"Ga3L21XfTRzgO4b7fSVSdCV723U=\", false, function () {\n  return [useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useInput","SimpleInput","props","value","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","reset","resetNameInput","trim","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","formIsValid","enteredEmailIsValid","nameChangedHandler","event","setEnteredName","target","emailInputChangeHandler","emailInputBlurHandler","formSubmissionHandler","preventDefault","console","log","nameInputClasses","emailInputClasses","emailInputIsInvalid","nameInputIsInvalid"],"sources":["/Users/weronikaficek/Desktop/PROJEKTY/198/src/components/SimpleInput.js"],"sourcesContent":["import { useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\n\n//mozna tez ustawic ref na inpucie i czytac wartosc tego refa\n//kiedy potrzebujemy\n\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput,\n  } = useInput((value) => value.trim() !== \"\");\n  //const nameInputRef = useRef(\"\");\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  //state dla walidacji\n  //const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  //const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  //const enteredEmailIsValid =\n  // enteredEmail.trim() !== \"\" && enteredEmail.includes(\"@\");\n  //const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    /*&& enteredAgeIsValid)*/ formIsValid = true;\n  }\n\n  const nameChangedHandler = (event) => {\n    setEnteredName(event.target.value);\n    //event dla kazdej wpisanej litery\n  };\n\n  const emailInputChangeHandler = (event) => {\n    setEnteredEmail(event.target.value);\n  };\n\n  // const nameBlurHandler = (event) => {\n  //   setEnteredNameTouched(true);\n  // };\n\n  const emailInputBlurHandler = (event) => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    //musimy dac zeby nie wysylalo HTTP requesta\n\n    //robimy if zeby user nie mogl wrzucic empty form\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    }\n    console.log(enteredName);\n    console.log(enteredEmail);\n    //to samo ale z uzyciem Ref, to nie jest zbyt dobre\n    //const enteredValue = nameInputRef.current.value;\n    //console.log(enteredValue);\n    resetNameInput();\n    //resetowanie zawartosci\n    // setEnteredName(\"\");\n    setEnteredEmail(\"\");\n    // setEnteredNameTouched(false);\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = emailInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n  //wyzej jest warunek do zmiany klasy wzgledem tego czy input jest valid czy nie\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          // ref={nameInputRef}\n          type=\"text\"\n          id=\"name\"\n          onChange={nameChangedHandler}\n          onBlur={nameBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className=\"error-text\">Name must not be empty.</p>\n        )}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor=\"email\">Email:</label>\n        <input\n          // ref={nameInputRef}\n          type=\"email\"\n          id=\"email\"\n          onChange={emailInputChangeHandler}\n          onBlur={emailInputBlurHandler}\n          value={enteredEmail}\n        />\n        {emailInputIsInvalid && (\n          <p className=\"error-text\">Email must not be empty.</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}> Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}