{"ast":null,"code":"var _jsxFileName = \"/Users/weronikaficek/Desktop/PROJEKTY/198/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport useInput from \"../hooks/use-input\"; //mozna tez ustawic ref na inpucie i czytac wartosc tego refa\n//kiedy potrzebujemy\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== \"\");\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmailInput\n  } = useInput(value => value.trim() !== \"\"); //const nameInputRef = useRef(\"\");\n  //const [enteredEmail, setEnteredEmail] = useState(\"\");\n  //state dla walidacji\n  //const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  //const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  //const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  //const enteredEmailIsValid =\n  //enteredEmail.trim() !== \"\" && enteredEmail.includes(\"@\");\n  //const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    /*&& enteredAgeIsValid)*/\n    formIsValid = true;\n  } //const nameChangeHandler = (event) => {\n  // setEnteredName(event.target.value);\n  //event dla kazdej wpisanej litery\n  //};\n  //const emailInputChangeHandler = (event) => {\n  // setEnteredEmail(event.target.value);\n  //};\n  // const nameBlurHandler = (event) => {\n  //   setEnteredNameTouched(true);\n  // };\n  // const emailInputBlurHandler = (event) => {\n  //  setEnteredEmailTouched(true);\n  //};\n\n\n  const formSubmissionHandler = event => {\n    event.preventDefault(); //musimy dac zeby nie wysylalo HTTP requesta\n    //robimy if zeby user nie mogl wrzucic empty form\n\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    }\n\n    console.log(enteredName);\n    console.log(enteredEmail); //to samo ale z uzyciem Ref, to nie jest zbyt dobre\n    //const enteredValue = nameInputRef.current.value;\n    //console.log(enteredValue);\n\n    resetNameInput();\n    resetEmailInput(); //resetowanie zawartosci\n    //setEnteredName(\"\");\n    //setEnteredEmail(\"\");\n    //setEnteredNameTouched(false);\n    //setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputHasError ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = emailInputHasError ? \"form-control invalid\" : \"form-control\"; //wyzej jest warunek do zmiany klasy wzgledem tego czy input jest valid czy nie\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        // ref={nameInputRef}\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangeHandler,\n        onBlur: nameBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        // ref={nameInputRef}\n        type: \"email\",\n        id: \"email\",\n        onChange: emailChangeHandler,\n        onBlur: emailBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), emailInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Email must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \" Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"pBS+yLf+7wnrqNx1qXDC5Mj7V8s=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useInput","SimpleInput","props","value","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","reset","resetNameInput","trim","enteredEmail","enteredEmailIsValid","emailInputHasError","emailChangeHandler","emailBlurHandler","resetEmailInput","formIsValid","formSubmissionHandler","event","preventDefault","console","log","nameInputClasses","emailInputClasses"],"sources":["/Users/weronikaficek/Desktop/PROJEKTY/198/src/components/SimpleInput.js"],"sourcesContent":["import { useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\n\n//mozna tez ustawic ref na inpucie i czytac wartosc tego refa\n//kiedy potrzebujemy\n\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmailInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  //const nameInputRef = useRef(\"\");\n  //const [enteredEmail, setEnteredEmail] = useState(\"\");\n  //state dla walidacji\n  //const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  //const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  //const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  //const enteredEmailIsValid =\n  //enteredEmail.trim() !== \"\" && enteredEmail.includes(\"@\");\n  //const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    /*&& enteredAgeIsValid)*/ formIsValid = true;\n  }\n\n  //const nameChangeHandler = (event) => {\n  // setEnteredName(event.target.value);\n  //event dla kazdej wpisanej litery\n  //};\n\n  //const emailInputChangeHandler = (event) => {\n  // setEnteredEmail(event.target.value);\n  //};\n\n  // const nameBlurHandler = (event) => {\n  //   setEnteredNameTouched(true);\n  // };\n\n  // const emailInputBlurHandler = (event) => {\n  //  setEnteredEmailTouched(true);\n  //};\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    //musimy dac zeby nie wysylalo HTTP requesta\n\n    //robimy if zeby user nie mogl wrzucic empty form\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    }\n    console.log(enteredName);\n    console.log(enteredEmail);\n    //to samo ale z uzyciem Ref, to nie jest zbyt dobre\n    //const enteredValue = nameInputRef.current.value;\n    //console.log(enteredValue);\n    resetNameInput();\n    resetEmailInput();\n    //resetowanie zawartosci\n    //setEnteredName(\"\");\n    //setEnteredEmail(\"\");\n    //setEnteredNameTouched(false);\n    //setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = emailInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n  //wyzej jest warunek do zmiany klasy wzgledem tego czy input jest valid czy nie\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          // ref={nameInputRef}\n          type=\"text\"\n          id=\"name\"\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n          value={enteredName}\n        />\n        {nameInputHasError && (\n          <p className=\"error-text\">Name must not be empty.</p>\n        )}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor=\"email\">Email:</label>\n        <input\n          // ref={nameInputRef}\n          type=\"email\"\n          id=\"email\"\n          onChange={emailChangeHandler}\n          onBlur={emailBlurHandler}\n          value={enteredEmail}\n        />\n        {emailInputHasError && (\n          <p className=\"error-text\">Email must not be empty.</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}> Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}